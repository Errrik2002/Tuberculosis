geom_msaBar()
# 3. Close the file
dev.off()
PG_PGRS3 <- readAAStringSet("Data/PG_PGRS3/sequence.fasta")
TB_msa_S3 <- msa(PG_PGRS3)
sink("Results/PG_PGRS3/MSA_PG_PGRS3.txt")
print(TB_msa_S3, show="complete")
sink()
class(TB_msa_S3) <- "AAMultipleAlignment"
pdf("Results/PG_PGRS3/Rplot.pdf", width = 20, height = 10)
# 2. Create the plot
ggmsa(TB_msa_S3, start = 300, end = 400, char_width = 0.5, seq_name = T)+
geom_seqlogo()+
geom_msaBar()
# 3. Close the file
dev.off()
PG_PGRS4 <- readAAStringSet("Data/PG_PGRS4/sequence.fasta")
TB_msa_S4 <- msa(PG_PGRS4)
sink("Results/PG_PGRS4/MSA_PG_PGRS4.txt")
print(TB_msa_S4, show="complete")
sink()
class(TB_msa_S4) <- "AAMultipleAlignment"
pdf("Results/PG_PGRS4/Rplot.pdf", width = 20, height = 10)
# 2. Create the plot
ggmsa(TB_msa_S4, start = 550, end = 600, char_width = 0.5, seq_name = T)+
geom_seqlogo()+
geom_msaBar()
# 3. Close the file
dev.off()
library(msa)
library(Biostrings)
library(ggplot2)
library(ggmsa)
pdf("Results/PG_PGRS4/Rplot.pdf", width = 20, height = 10)
# 2. Create the plot
ggmsa(TB_msa_S4, start = 550, end = 600, char_width = 0.5, seq_name = T)+
geom_seqlogo()+
geom_msaBar()
# 3. Close the file
dev.off()
#REPETIR
PG_PGRS1 <- readAAStringSet("Data/PG_PGRS1/sequence.fasta")
library(msa)
library(Biostrings)
library(ggplot2)
library(ggmsa)
#REPETIR
PG_PGRS1 <- readAAStringSet("Data/PG_PGRS1/sequence.fasta")
TB_msa_S1 <- msa(PG_PGRS1)
PG_PGRS1
slotNames(PG_PGRS1)
seqnames(PG_PGRS1)
names(PG_PGRS1)
PG_PGRS1_A <- PG_PGRS1[-4]
names(PG_PGRS1_A)
TB_msa_S1 <- msa(PG_PGRS1_A)
sink("Results/PG_PGRS1/MSA_PE_PGRS1.txt")
print(TB_msa_S1, show="complete")
sink()
class(TB_msa_S1) <- "AAMultipleAlignment"
pdf("Results/PG_PGRS1/Rplot.pdf", width = 20, height = 10)
# 2. Create the plot
ggmsa(TB_msa_S1, start = 300, end = 400, char_width = 0.5, seq_name = T)+
geom_seqlogo()+
geom_msaBar()
# 3. Close the file
dev.off()
PG_PGRS4 <- readAAStringSet("Data/PG_PGRS4/sequence.fasta")
names(PG_PGRS4)
PG_PGRS4_A <- PG_PGRS4[-C(1,5,6,7)]
PG_PGRS4_A <- PG_PGRS4[2:4]
TB_msa_S4 <- msa(PG_PGRS4_A)
sink("Results/PG_PGRS4/MSA_PG_PGRS4.txt")
print(TB_msa_S4, show="complete")
sink()
class(TB_msa_S4) <- "AAMultipleAlignment"
pdf("Results/PG_PGRS4/Rplot.pdf", width = 20, height = 10)
# 2. Create the plot
ggmsa(TB_msa_S4, start = 550, end = 600, char_width = 0.5, seq_name = T)+
geom_seqlogo()+
geom_msaBar()
# 3. Close the file
dev.off()
PG_PGRS12 <- readAAStringSet("Data/PG_PGRS12/sequence.fasta")
names(PG_PGRS12)
#36, 32, 27,26, 23, 18,17, 1,2
PG_PGRS12_A <- PG_PGRS12[c(-36,-32,-27,-26,-23,-18,-17,-1,-2)]
names(PG_PGRS12_A)
TB_msa_S12 <- msa(PG_PGRS12_A)
sink("Results/PG_PGRS12/MSA_PE_PGRS12.txt")
print(TB_msa_S12, show="complete")
sink()
class(TB_msa_S12) <- "AAMultipleAlignment"
pdf("Results/PG_PGRS12/Rplot.pdf", width = 30, height = 15)
# 2. Create the plot
ggmsa(TB_msa_S12, start = 1, end = 120, char_width = 0.5, seq_name = T)+
geom_seqlogo()+
geom_msaBar()
# 3. Close the file
dev.off()
PG_PGRS13 <- readAAStringSet("Data/PG_PGRS13/sequence.fasta")
names(PG_PGRS13)
PG_PGRS13_A <- PG_PGRS13[C(-23,-19,-14, -13, -11, -6, -1,-2,-3)]
PG_PGRS13_A <- PG_PGRS13[c(-23,-19,-14, -13, -11, -6, -1,-2,-3)]
names(PG_PGRS13_A)
TB_msa_S13 <- msa(PG_PGRS13_A)
sink("Results/PG_PGRS13/MSA_PE_PGRS13.txt")
print(TB_msa_S13, show="complete")
sink()
class(TB_msa_S13) <- "AAMultipleAlignment"
pdf("Results/PG_PGRS13/Rplot.pdf", width = 30, height = 15)
# 2. Create the plot
ggmsa(TB_msa_S13, start = 700, end = 800, char_width = 0.5, seq_name = T)+
geom_seqlogo()+
geom_msaBar()
# 3. Close the file
dev.off()
PG_PGRS14 <- readAAStringSet("Data/PG_PGRS14/sequence.fasta")
TB_msa_S14 <- msa(PG_PGRS14)
names(PG_PGRS14)
#46, 44, 42, 38, 35,1,2
PG_PGRS14_A <- PG_PGRS14[c(-46,-44,-42,-38,-35,-1,-2)]
names(PG_PGRS14_A)
TB_msa_S14 <- msa(PG_PGRS14_A)
sink("Results/PG_PGRS14/MSA_PE_PGRS14.txt")
print(TB_msa_S14, show="complete")
sink()
class(TB_msa_S14) <- "AAMultipleAlignment"
pdf("Results/PG_PGRS14/Rplot.pdf", width = 40, height = 20)
# 2. Create the plot
ggmsa(TB_msa_S14, start = 220, end = 300, char_width = 0.5, seq_name = T)+
geom_seqlogo()+
geom_msaBar()
# 3. Close the file
dev.off()
PG_PGRS15 <- readAAStringSet("Data/PG_PGRS15/sequence.fasta")
names(PG_PGRS15)
#25, 21,12,13, 9, 5, 4, 1
PG_PGRS15_A <- PG_PGRS15{c(-25,-21,-12,-13,-9,-5,-4,-1)}
#25, 21,12,13, 9, 5, 4, 1
PG_PGRS15_A <- PG_PGRS15{c(-25,-21,-12,-13,-9,-5,-4,-1)
#25, 21,12,13, 9, 5, 4, 1
PG_PGRS15_A <- PG_PGRS15[c(-25,-21,-12,-13,-9,-5,-4,-1)]
names(PG_PGRS15_A)
TB_msa_S15 <- msa(PG_PGRS15_A)
sink("Results/PG_PGRS15/MSA_PE_PGRS15.txt")
print(TB_msa_S15, show="complete")
sink()
class(TB_msa_S15) <- "AAMultipleAlignment"
pdf("Results/PG_PGRS15/Rplot.pdf", width = 30, height = 15)
# 2. Create the plot
ggmsa(TB_msa_S15, start = 50, end = 150, char_width = 0.5, seq_name = T)+
geom_seqlogo()+
geom_msaBar()
# 3. Close the file
dev.off()
PG_PGRS16 <- readAAStringSet("Data/PG_PGRS16/sequence.fasta")
names(PG_PGRS16)
#39,38,28,22, 1
PG_PGR16_A <- PG_PGRS16[c(-39, -38,-28,-22,-1)]
names(PG_PGR16_A)
#39,38,28,22, 1
PG_PGR16_A <- PG_PGRS16[c(-39, -38,-28,-22,-1)]
TB_msa_S16 <- msa(PG_PGRS16_A)
#39,38,28,22, 1
PG_PGRS16_A <- PG_PGRS16[c(-39, -38,-28,-22,-1)]
names(PG_PGRS16_A)
TB_msa_S16 <- msa(PG_PGRS16_A)
sink("Results/PG_PGRS16/MSA_PE_PGRS16.txt")
print(TB_msa_S16, show="complete")
sink()
class(TB_msa_S16) <- "AAMultipleAlignment"
pdf("Results/PG_PGRS16/Rplot.pdf", width = 30, height = 15)
# 2. Create the plot
ggmsa(TB_msa_S16, start = 300, end = 400, char_width = 0.5, seq_name = T)+
geom_seqlogo()+
geom_msaBar()
# 3. Close the file
dev.off()
library(msa)
library(Biostrings)
library(ggplot2)
library(ggmsa)
PG_PGRS2 <- readAAStringSet("Data/PG_PGRS2/sequence.fasta")
TB_msa_S2 <- msa(PG_PGRS2)
class(TB_msa_S2) <- "AAMultipleAlignment"
pdf("Results/PG_PGRS2_R/Rplot.pdf", width = 20, height = 10)
# 2. Create the plot
ggmsa(TB_msa_S2, start = 300, end = 400, char_width = 0.5, seq_name = T)+
geom_seqlogo()+
geom_msaBar()
# 3. Close the file
dev.off()
install.packages("VennDiagram")
library(VennDiagram)
base_proteins <- read.csv("Data/venndiagram.csv")
View(base_proteins)
if (!require(devtools)) install.packages("devtools")
devtools::install_github("gaospecial/ggVennDiagram")
library(ggVennDiagram)
x <- list(
citosol = c("Factor_E.","Acil_CoA", "ZapE") ,
membrana =  c("SubB_ATPs","DUF3068"),
division = c("ZapE") ,
pared = c("IniB", "PE_PGRS"),
metabolismo = c("Acil_CoA","SubB_ATPs","DUF3068","Diacilglicerol") ,
superficie= c("PTP"),
secretion = c("MPB64_MPT64", "PE_PGRS","Diacilglicerol","PTP")
)
library(ggVennDiagram)
library(ggplot2)
ggVennDiagram(x)
citosol <- c("Factor_E.","Acil_CoA", "ZapE")
membrana <-  c("SubB_ATPs","DUF3068")
division <- c("ZapE")
pared <- c("IniB", "PE_PGRS")
metabolismo <- c("Acil_CoA","SubB_ATPs","DUF3068","Diacilglicerol")
superficie <- c("PTP")
secretion <- c("MPB64_MPT64", "PE_PGRS","Diacilglicerol","PTP")
# Generate plot
v <- venn.diagram(list(citosol=citosol, membrana=membrana, division=division, pared=pared, metabolismo=metabolismo,superficie=superficie,secretion=secretion),
alpha = c(0.5, 0.5), cat.cex = 1.5, cex=1.5,
filename=NULL)
# Generate plot
v <- venn.diagram(list(citosol=citosol, membrana=membrana, division=division, pared=pared, metabolismo=metabolismo,superficie=superficie,secretion=secretion),
alpha = c(0.5, 0.5,0.5,0.5,0.5,0.5,0.5), cat.cex = 1.5, cex=1.5,
filename=NULL)
citosol <- c("Factor_E.","Acil_CoA", "ZapE")
membrana <-  c("SubB_ATPs","DUF3068")
division <- ("ZapE")
pared <- c("IniB", "PE_PGRS")
metabolismo <- c("Acil_CoA","SubB_ATPs","DUF3068","Diacilglicerol")
superficie <- ("PTP")
secretion <- c("MPB64_MPT64", "PE_PGRS","Diacilglicerol","PTP")
ggVennDiagram(x)
# Generate plot
v <- venn.diagram(list(citosol=citosol, membrana=membrana, division=division, pared=pared, metabolismo=metabolismo,superficie=superficie,secretion=secretion),
alpha = c(0.5, 0.5,0.5,0.5,0.5,0.5,0.5), cat.cex = 1.5, cex=1.5,
filename=NULL)
####
install.packages("RAM")
library(RAM)
####
install.packages("RAM")
install.packages("Rtools")
library(RAM)
foo <- c('a','b','c','d')
baa <- c('a','e','f','g')
group.venn(list(foo=foo, baa=baa), label=TRUE,
fill = c("orange", "blue"),
cat.pos = c(0, 0),
lab.cex=1.1)
####
install.packages("RAM")
library(RAM)
####
library(ggvenn)
####
install.packages("ggvenn")
library(ggvenn)
library(RColorBrewer)
AA <- c("hi","foo", "bar","yep","woo","hoo")
BB <- c("baa","yep", "woo","yes")
CC <- c("yes","foo","hi","woo", "huh")
x <- list(AA=AA , BB=BB , CC=CC)
ggvenn(x, show_elements = T, label_sep = "\n", fill_color = brewer.pal(name="Set2",n=3))
x <- list(citosol=citosol, membrana=membrana, division=division, pared=pared, metabolismo=metabolismo, superficie=superficie,secretion=secretion)
ggvenn(x, show_elements = T, label_sep = "\n", fill_color = brewer.pal(name="Set2",n=7))
citosol <- c("Factor_E.","Acil_CoA", "ZapE")
membrana <-  c("SubB_ATPs","DUF3068")
division <- c("ZapE")
pared <- c("IniB", "PE_PGRS")
metabolismo <- c("Acil_CoA","SubB_ATPs","DUF3068","Diacilglicerol")
superficie <- c("PTP")
secretion <- c("MPB64_MPT64", "PE_PGRS","Diacilglicerol","PTP")
x <- list(citosol=citosol, membrana=membrana, division=division, pared=pared, metabolismo=metabolismo, superficie=superficie,secretion=secretion)
ggvenn(x, show_elements = T, label_sep = "\n", fill_color = brewer.pal(name="Set2",n=7))
ggvenn(x, show_elements = T, label_sep = "\n", fill_color = brewer.pal(name="Set2",n=9))
ggvenn(x, show_elements = T, label_sep = "\n")
x <- list(citosol=citosol, membrana=membrana, division=division, pared=pared, metabolismo=metabolismo, superficie=superficie,secretion=secretion)
ggvenn(x, show_elements = T, label_sep = "\n")
read.csv("Data/Libro1.csv")
Proteinas <- read.csv("Data/Libro1.csv")
Proteinas
venn.diagram(Proteinas)
install.packages("venn")
if (!"ggpolypath" %in% installed.packages()) {
install.packages("ggpolypath")
}
library(venn)
library(ggplot2)
library(ggpolypath)
venn(Proteinas)
Proteinas
venn(t(Proteinas))
venn(as.numeric(Proteinas))
Proteinas2 <- Proteinas[,-1]
Proteinas2 <- Proteinas[,-1]
row.names(Proteinas2) <- Proteinas[,1]
venn(as.numeric(Proteinas2))
venn(Proteinas2)
#samp2 <- samp[,-1]
#rownames(samp2) <- samp[,1]
Proteinas2
venn(Proteinas2, ggplot = T)
venn(t(Proteinas2), ggplot = T)
#samp2 <- samp[,-1]
#rownames(samp2) <- samp[,1]
t(Proteinas2)
library(venn)
library(ggplot2)
library(ggpolypath)
#samp2 <- samp[,-1]
#rownames(samp2) <- samp[,1]
t(Proteinas2)
venn(t(Proteinas2), ggplot = T)
venn(Proteinas2, ggplot = T)
ggVennDiagram(Proteinas2)
ggvenn(Proteinas2)
ggvenn(t(Proteinas2))
library(venn)
library(ggplot2)
library(ggpolypath)
Proteinas <- read.csv("Data/Libro1.csv")
Proteinas
Proteinas2 <- Proteinas[,-1]
row.names(Proteinas2) <- Proteinas[,1]
#samp2 <- samp[,-1]
#rownames(samp2) <- samp[,1]
t(Proteinas2)
library(tidyverse)
#install.packages("ggvenn")
library(ggvenn)
Name <- c("Amanda", "Emily", "George", "Baker", "Lee", "Jorge")
Event1 <- c(1,0,1,0,1,0)
Event2 <- c(1,0,0,0,1,1)
Event3 <- c(1,1,0,1,1,0)
Event4 <- c(1,1,0,0,1, 0)
df1 <- data.frame(Event1, Event2, Event3, Event4, Name)
df1 %>%
mutate(across(starts_with("Event"), as.logical)) %>%
ggplot() +
geom_venn(aes(A = Event1, B = Event2, C = Event3, D = Event4),
set_names = Name)
#samp2 <- samp[,-1]
#rownames(samp2) <- samp[,1]
t(Proteinas2)
Name <- c("Citoplasma", "Metabolismo", "Extracelular", "Division", "Membrana", "Pared","Superficie")
#samp2 <- samp[,-1]
#rownames(samp2) <- samp[,1]
Proteinas
df1 <- data.frame(IniB, FactorE, MPB64_MPT64, PE_PEGRS, Acil_CoA, SubB_ATPs, DUF3068, DGAT,ZapE, PTP, Name)
Name <- c("Citoplasma", "Metabolismo", "Extracelular", "Division", "Membrana", "Pared","Superficie")
IniB <- c(0,0,0,0,0,1,0)
FactorE <- c(1,0,0,0,0,0,0)
MPB64_MPT64 <- c(0,0,1,0,0,0,0)
PE_PEGRS <- c(0,0,1,0,0,1,0)
Acil_CoA <- c( 1, 1,0,0,0,0,0)
SubB_ATPs <- c(0,1,0,0,1,0,0)
DUF3068 <- c(0,1,0,0,1,0,0)
DGAT <- c(0,1,1,0,0,0,0)
ZapE <- c(1,0,0,1,0,0,0)
PTP <- c(0,0,1,0,0,0,1)
df1 <- data.frame(IniB, FactorE, MPB64_MPT64, PE_PEGRS, Acil_CoA, SubB_ATPs, DUF3068, DGAT,ZapE, PTP, Name)
df1 %>%
mutate(across(starts_with("Event"), as.logical)) %>%
ggplot() +
geom_venn(aes(A = Event1, B = Event2, C = Event3, D = Event4),
set_names = Name)
library(venn)
library(ggvenn)
library(RColorBrewer)
df1 %>%
mutate(across(starts_with("Event"), as.logical)) %>%
ggplot() +
geom_venn(aes(A = Event1, B = Event2, C = Event3, D = Event4),
set_names = Name)
library(msa)
library(Biostrings)
library(ggplot2)
library(ggmsa)
PG_PGRS2 <- readAAStringSet("Data/PG_PGRS2/sequence.fasta")
TB_msa_S2 <- msa(PG_PGRS2)
sink("Results/PG_PGRS2_R/MSA_PG_PGRS2.txt")
print(TB_msa_S2, show="complete")
sink()
class(TB_msa_S2) <- "AAMultipleAlignment"
pdf("Results/PG_PGRS2_R/Rplot.pdf", width = 20, height = 10)
# 2. Create the plot
ggmsa(TB_msa_S2, start = 300, end = 400, char_width = 0.5, seq_name = T)+
geom_seqlogo()+
geom_msaBar()
# 3. Close the file
dev.off()
library(msa)
library(Biostrings)
library(ggplot2)
library(ggmsa)
library(msa)
library(Biostrings)
library(ggplot2)
library(ggmsa)
PPE2 <- readAAStringSet("Data/PPE2/sequencePPE2.fasta")
PPE2_MSA <- msa(PPE2)
sink("Results/PPE2_MSA/PPE2MSA.txt")
print(PPE2_MSA, show="complete")
sink()
class(PPE2_MSA) <- "AAMultipleAlignment"
pdf("Results/PPE2_MSA/rplot.pdf", width = 40, height = 20)
# 2. Create the plot
ggmsa(PPE2_MSA, start = 250, end = 370, char_width = 0.5, seq_name = T)+
geom_seqlogo()+
geom_msaBar()
# 3. Close the file
dev.off()
pdf("Results/PPE2_MSA/rplot1.pdf", width = 40, height = 20)
# 2. Create the plot
ggmsa(PPE2_MSA, start = 1, end = 550, char_width = 0.5, seq_name = T)+
geom_seqlogo()+
geom_msaBar()
# 3. Close the file
dev.off()
PE_PGRS62 <- readAAStringSet("Data/PE_PGRS62/sequence (2).fasta")
PE_PGRS62_MSA <- msa(PE_PGRS62)
sink("Results/PE_PGRS62/MSA_PE_PGRS62.txt")
print(PE_PGRS62_MSA, show="complete")
sink()
class(PE_PGRS62_MSA) <- "AAMultipleAlignment"
pdf("Results/PE_PGRS62/rplot.pdf", width = 40, height = 20)
# 2. Create the plot
ggmsa(PE_PGRS62_MSA, start = 200, end = 300, char_width = 0.5, seq_name = T)+
geom_seqlogo()+
geom_msaBar()
# 3. Close the file
dev.off()
PG_PGRS3 <- readAAStringSet("Data/PG_PGRS3/sequence (2).fasta")
TB_msa_S3 <- msa(PG_PGRS3)
sink("Results/PG_PGRS3/MSA_PG_PGRS3.txt")
print(TB_msa_S3, show="complete")
sink()
class(TB_msa_S3) <- "AAMultipleAlignment"
pdf("Results/PG_PGRS3/Rplot.pdf", width = 20, height = 10)
# 2. Create the plot
ggmsa(TB_msa_S3, start = 400, end = 500, char_width = 0.5, seq_name = T)+
geom_seqlogo()+
geom_msaBar()
# 3. Close the file
dev.off()
PE_5 <- readAAStringSet("Data/PE5/sequence (2).fasta")
PE_5_MSA <- msa(PE_5)
sink("Results/PE5/MSA_PEE5.txt")
print(PE_5_MSA, show="complete")
sink()
class(PE_5_MSA) <- "AAMultipleAlignment"
pdf("Results/PE5/rplot.pdf", width = 40, height = 20)
# 2. Create the plot
ggmsa(PE_5_MSA, start = 1, end = 100, char_width = 0.5, seq_name = T)+
geom_seqlogo()+
geom_msaBar()
# 3. Close the file
dev.off()
PPE15 <- readAAStringSet("Data/PPE15/sequence (2).fasta")
PPE15_MSA <- msa(PPE15)
sink("Results/PPE15/PPE15_MSA.txt")
print(PPE15_MSA, show="complete")
sink()
class(PPE15_MSA) <- "AAMultipleAlignment"
pdf("Results/PPE15/rplot.pdf", width = 40, height = 20)
# 2. Create the plot
ggmsa(PPE15_MSA, start = 100, end = 200, char_width = 0.5, seq_name = T)+
geom_seqlogo()+
geom_msaBar()
# 3. Close the file
dev.off()
pdf("Results/PPE15/rplotT.pdf", width = 40, height = 20)
# 2. Create the plot
ggmsa(PPE15_MSA, start = 1, end = 400, char_width = 0.5, seq_name = T)+
geom_seqlogo()+
geom_msaBar()
# 3. Close the file
dev.off()
PE_PGRS47 <- readAAStringSet("Data/PE_PGRS47/sequence (2).fasta")
library(msa)
library(Biostrings)
library(ggplot2)
system.file("tex", "texshade.sty", package="msa")
library(ggmsa)
PE_PGRS47 <- readAAStringSet("Data/PE_PGRS47/sequence (2).fasta")
PE_PGRS47_MSA <- msa(PE_PGRS47)
sink("Results/PE_PGRS47/MSA_PE_PGRS47.txt")
print(PE_PGRS47_MSA, show="complete")
sink()
class(PE_PGRS47_MSA) <- "AAMultipleAlignment"
pdf("Results/PE_PGRS47/rplot.pdf", width = 40, height = 20)
# 2. Create the plot
ggmsa(PE_PGRS47_MSA, start = 450, end = 550, char_width = 0.5, seq_name = T)+
geom_seqlogo()+
geom_msaBar()
# 3. Close the file
dev.off()
pdf("Results/PE_PGRS47/rplotT.pdf", width = 40, height = 20)
# 2. Create the plot
ggmsa(PE_PGRS47_MSA, start = 1, end = 550, char_width = 0.5, seq_name = T)+
geom_seqlogo()+
geom_msaBar()
# 3. Close the file
dev.off()
library(msa)
library(Biostrings)
library(ggplot2)
system.file("tex", "texshade.sty", package="msa")
library(ggmsa)
